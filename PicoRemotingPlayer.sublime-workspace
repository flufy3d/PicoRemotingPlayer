{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"else",
				"elseif"
			],
			[
				"har",
				"hardware_data"
			],
			[
				"bu",
				"button"
			],
			[
				"res",
				"response"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pico_remoting_player/main.cpp",
			"settings":
			{
				"buffer_size": 7153,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAH8EAAAAAAAAfwQAAAAAAABTCgAAdm9pZCBTaG93SGVscCgpIHsKICAgIC8vIFRPRE86IEltcHJvdmUvdXBkYXRlIHdoZW4gdGhpbmdzIGFyZSBtb3JlIHNldHRsZWQuCiAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sCiAgICAgICAgICAgICAgICJIZWxsb1hyIC0tZ3JhcGhpY3N8LWcgPEdyYXBoaWNzIEFQST4gWy0tZm9ybWZhY3RvcnwtZmYgPEZvcm0gZmFjdG9yPl0gWy0tdmlld2NvbmZpZ3wtdmMgPFZpZXcgY29uZmlnPl0gIgogICAgICAgICAgICAgICAiWy0tYmxlbmRtb2RlfC1ibSA8QmxlbmQgbW9kZT5dIFstLXNwYWNlfC1zIDxTcGFjZT5dIFstLXZlcmJvc2V8LXZdIik7CiAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJHcmFwaGljcyBBUElzOiAgICAgICAgICAgIEQzRDExLCBEM0QxMiwgT3BlbkdMRVMsIE9wZW5HTCwgVnVsa2FuMiwgVnVsa2FuIik7CiAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJGb3JtIGZhY3RvcnM6ICAgICAgICAgICAgIEhtZCwgSGFuZGhlbGQiKTsKICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgIlZpZXcgY29uZmlndXJhdGlvbnM6ICAgICAgTW9ubywgU3RlcmVvIik7CiAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJFbnZpcm9ubWVudCBibGVuZCBtb2RlczogIE9wYXF1ZSwgQWRkaXRpdmUsIEFscGhhQmxlbmQiKTsKICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgIlNwYWNlczogICAgICAgICAgICAgICAgICAgVmlldywgTG9jYWwsIFN0YWdlIik7Cn0KCmJvb2wgVXBkYXRlT3B0aW9uc0Zyb21Db21tYW5kTGluZShPcHRpb25zJiBvcHRpb25zLCBpbnQgYXJnYywgY2hhciogYXJndltdKSB7CiAgICBpbnQgaSA9IDE7ICAvLyBJbmRleCAwIGlzIHRoZSBwcm9ncmFtIG5hbWUgYW5kIGlzIHNraXBwZWQuCgogICAgYXV0byBnZXROZXh0QXJnID0gWyZdIHsKICAgICAgICBpZiAoaSA+PSBhcmdjKSB7CiAgICAgICAgICAgIHRocm93IHN0ZDo6aW52YWxpZF9hcmd1bWVudCgiQXJndW1lbnQgcGFyYW1ldGVyIG1pc3NpbmciKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzdGQ6OnN0cmluZyhhcmd2W2krK10pOwogICAgfTsKCiAgICB3aGlsZSAoaSA8IGFyZ2MpIHsKICAgICAgICBjb25zdCBzdGQ6OnN0cmluZyBhcmcgPSBnZXROZXh0QXJnKCk7CiAgICAgICAgaWYgKEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLS1ncmFwaGljcyIpIHx8IEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLWciKSkgewogICAgICAgICAgICBvcHRpb25zLkdyYXBoaWNzUGx1Z2luID0gZ2V0TmV4dEFyZygpOwogICAgICAgIH0gZWxzZSBpZiAoRXF1YWxzSWdub3JlQ2FzZShhcmcsICItLWZvcm1mYWN0b3IiKSB8fCBFcXVhbHNJZ25vcmVDYXNlKGFyZywgIi1mZiIpKSB7CiAgICAgICAgICAgIG9wdGlvbnMuRm9ybUZhY3RvciA9IGdldE5leHRBcmcoKTsKICAgICAgICB9IGVsc2UgaWYgKEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLS12aWV3Y29uZmlnIikgfHwgRXF1YWxzSWdub3JlQ2FzZShhcmcsICItdmMiKSkgewogICAgICAgICAgICBvcHRpb25zLlZpZXdDb25maWd1cmF0aW9uID0gZ2V0TmV4dEFyZygpOwogICAgICAgIH0gZWxzZSBpZiAoRXF1YWxzSWdub3JlQ2FzZShhcmcsICItLWJsZW5kbW9kZSIpIHx8IEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLWJtIikpIHsKICAgICAgICAgICAgb3B0aW9ucy5FbnZpcm9ubWVudEJsZW5kTW9kZSA9IGdldE5leHRBcmcoKTsKICAgICAgICB9IGVsc2UgaWYgKEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLS1zcGFjZSIpIHx8IEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLXMiKSkgewogICAgICAgICAgICBvcHRpb25zLkFwcFNwYWNlID0gZ2V0TmV4dEFyZygpOwogICAgICAgIH0gZWxzZSBpZiAoRXF1YWxzSWdub3JlQ2FzZShhcmcsICItLXZlcmJvc2UiKSB8fCBFcXVhbHNJZ25vcmVDYXNlKGFyZywgIi12IikpIHsKICAgICAgICAgICAgTG9nOjpTZXRMZXZlbChMb2c6OkxldmVsOjpWZXJib3NlKTsKICAgICAgICB9IGVsc2UgaWYgKEVxdWFsc0lnbm9yZUNhc2UoYXJnLCAiLS1oZWxwIikgfHwgRXF1YWxzSWdub3JlQ2FzZShhcmcsICItaCIpKSB7CiAgICAgICAgICAgIFNob3dIZWxwKCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBzdGQ6OmludmFsaWRfYXJndW1lbnQoRm10KCJVbmtub3duIGFyZ3VtZW50OiAlcyIsIGFyZy5jX3N0cigpKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIENoZWNrIGZvciByZXF1aXJlZCBwYXJhbWV0ZXJzLgogICAgaWYgKG9wdGlvbnMuR3JhcGhpY3NQbHVnaW4uZW1wdHkoKSkgewogICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6RXJyb3IsICJHcmFwaGljc1BsdWdpbiBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQiKTsKICAgICAgICBTaG93SGVscCgpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB0cnkgewogICAgICAgIG9wdGlvbnMuUGFyc2VTdHJpbmdzKCk7CiAgICB9IGNhdGNoIChzdGQ6OmludmFsaWRfYXJndW1lbnQmIGlhKSB7CiAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpFcnJvciwgaWEud2hhdCgpKTsKICAgICAgICBTaG93SGVscCgpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwp9",
					"AQAAAAAAAAABAAAA0g4AAAAAAAB/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAHkEAAAAAAAAeQQAAAAAAAANAAAAI2Vsc2UKCiNlbmRpZg",
					"AQAAAAAAAAABAAAAhgQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAABYBAAAAAAAAFgEAAAAAAAAeAAAAI2lmZGVmIFhSX1VTRV9QTEFURk9STV9BTkRST0lE",
					"AQAAAAAAAAABAAAANAEAAAAAAAAWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"indent",
					null,
					"EgAAABcBAAAAAAAAGwEAAAAAAAAAAAAALQEAAAAAAAAxAQAAAAAAAAAAAACQAQAAAAAAAJQBAAAAAAAAAAAAAOwBAAAAAAAA8AEAAAAAAAAAAAAATgIAAAAAAABSAgAAAAAAAAAAAAC3AgAAAAAAALsCAAAAAAAAAAAAAL4CAAAAAAAAwgIAAAAAAAAAAAAA/QIAAAAAAAABAwAAAAAAAAAAAAAmAwAAAAAAACoDAAAAAAAAAAAAAHIDAAAAAAAAdgMAAAAAAAAAAAAAngMAAAAAAACiAwAAAAAAAAAAAACpAwAAAAAAAK0DAAAAAAAAAAAAANMDAAAAAAAA1wMAAAAAAAAAAAAAAQQAAAAAAAAFBAAAAAAAAAAAAABPBAAAAAAAAFMEAAAAAAAAAAAAAH4EAAAAAAAAggQAAAAAAAAAAAAAiAQAAAAAAACMBAAAAAAAAAAAAACdBAAAAAAAAKEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgQAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					2,
					"right_delete",
					null,
					"AgAAAH0BAAAAAAAAfQEAAAAAAAAIAAAAT3BlbkdMRVN9AQAAAAAAAH0BAAAAAAAAAQAAAHw",
					"AQAAAAAAAAABAAAAfQEAAAAAAACFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACeBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQQAAAAAAACZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"left_delete",
					null,
					"AgAAAAYQAAAAAAAABhAAAAAAAABQAwAAQUFzc2V0TWFuYWdlciogYXNzZXRNYW5hZ2VyID0gYXBwLT5hY3Rpdml0eS0+YXNzZXRNYW5hZ2VyOwogICAgICAgIEFBc3NldCogYXNzZXQgPSBBQXNzZXRNYW5hZ2VyX29wZW4oYXNzZXRNYW5hZ2VyLCAibGVmdF9hZGp1c3RlZC5wbmciLCBBQVNTRVRfTU9ERV9CVUZGRVIpOwoKICAgICAgICBpZiAoYXNzZXQgPT0gbnVsbHB0cikgewoKICAgICAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpFcnJvciwKICAgICAgICAgICAgICAgICAgICAgICBGbXQoIkFBc3NldE1hbmFnZXJfb3BlbiBmYWlsZWQiKSk7CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyDojrflj5blm77niYflpKflsI/vvIjlrZfoioLvvIkKICAgICAgICBvZmZfdCBsZW5ndGggPSBBQXNzZXRfZ2V0TGVuZ3RoKGFzc2V0KTsKCiAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpFcnJvciwKICAgICAgICAgICAgICAgICAgIEZtdCgibGVmdF9hZGp1c3RlZC5wbmcgbGVuZ3RoPSVsZCIsIGxlbmd0aCkpOwoKICAgICAgICAvLyDliIbphY3lhoXlrZjnqbrpl7Tlubbor7vlj5bmlofku7YKICAgICAgICBjaGFyKiBidWZmZXIgPSBuZXcgY2hhcltsZW5ndGhdOwogICAgICAgIEFBc3NldF9yZWFkKGFzc2V0LCBidWZmZXIsIGxlbmd0aCk7CgogICAgICAgIC8vIOatpOaXtu+8jGJ1ZmZlcuS4reWwseWMheWQq+S6huWbvueJh+eahOaVsOaNru+8jOS9oOWPr+S7peeUqOS7u+S9leWbvuWDj+WkhOeQhuW6k+adpeWkhOeQhuWugwogICAgICAgIC8vIC4uLgoKICAgICAgICAvLyDph4rmlL7otYTmupAKICAgICAgICBBQXNzZXRfY2xvc2UoYXNzZXQpOwogICAgICAgIGRlbGV0ZVtdIGJ1ZmZlcjuaBAAAAAAAAJoEAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAA6hIAAAAAAAAGEAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAACEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+Q8AAAAAAAD5DwAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"paste",
					null,
					"AQAAAAIQAAAAAAAALBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"paste",
					null,
					"AgAAAO8PAAAAAAAA+Q8AAAAAAAAAAAAA+Q8AAAAAAAD5DwAAAAAAAAoAAABMb2FkIEltYWdl",
					"AQAAAAAAAAABAAAA7w8AAAAAAAD5DwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+Q8AAAAAAAD5DwAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"paste",
					null,
					"AQAAAPoPAAAAAAAACBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+g8AAAAAAAD6DwAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADsQAAAAAAAAPBAAAAAAAAAAAAAAPBAAAAAAAABEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxAAAAAAAAA7EAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"paste",
					null,
					"AQAAAEQQAAAAAAAAlRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBAAAAAAAABEEAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\n#include"
					},
					"CQAAAAUBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAgBAAAAAAAAAAAAAAgBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAANAQAAAAAAAAAAAAANAQAAAAAAAA4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4BAAAAAAAADwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgEAAAAAAAAOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAA8BAAAAAAAAEQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwEAAAAAAAAPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "my"
					},
					"AgAAABABAAAAAAAAEQEAAAAAAAAAAAAAEQEAAAAAAAASAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAEAAAAAAAAQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert_completion",
					{
						"completion": "my_asset_manager",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "my_asset_manager"
					},
					"AgAAABABAAAAAAAAEAEAAAAAAAACAAAAbXkQAQAAAAAAACABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgEAAAAAAAASAQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": ".h"
					},
					"AgAAACABAAAAAAAAIQEAAAAAAAAAAAAAIQEAAAAAAAAiAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAEAAAAAAAAgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"cut",
					null,
					"AQAAAFoQAAAAAAAAWhAAAAAAAABYAAAAICAgICAgICBBc3NldERhdGEgYXNzZXREYXRhID0gTXlBc3NldE1hbmFnZXI6Okluc3RhbmNlKCkuTG9hZEFzc2V0KCJsZWZ0X2FkanVzdGVkLnBuZyIpOw",
					"AQAAAAAAAAABAAAAshAAAAAAAABaEAAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					4,
					"right_delete",
					null,
					"BAAAAFoQAAAAAAAAWhAAAAAAAAABAAAACloQAAAAAAAAWhAAAAAAAAABAAAACloQAAAAAAAAWhAAAAAAAAAEAAAAICAgIFoQAAAAAAAAWhAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAWhAAAAAAAABaEAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					2,
					"right_delete",
					null,
					"AgAAAFoQAAAAAAAAWhAAAAAAAAABAAAACloQAAAAAAAAWhAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAWhAAAAAAAABbEAAAAAAAAAAAAAAAAAAA"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFkQAAAAAAAAWhAAAAAAAAAAAAAAWhAAAAAAAABiEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWRAAAAAAAABZEAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAeRAAAAAAAAB6EAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADxGwAALy8gQ29weXJpZ2h0IChjKSAyMDE3LTIwMjIsIFRoZSBLaHJvbm9zIEdyb3VwIEluYy4KLy8KLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAKCiNpbmNsdWRlICJwY2guaCIKI2luY2x1ZGUgImNvbW1vbi5oIgojaW5jbHVkZSAib3B0aW9ucy5oIgojaW5jbHVkZSAicGxhdGZvcm1kYXRhLmgiCiNpbmNsdWRlICJwbGF0Zm9ybXBsdWdpbi5oIgojaW5jbHVkZSAiZ3JhcGhpY3NwbHVnaW4uaCIKI2luY2x1ZGUgIm9wZW54cl9wcm9ncmFtLmgiCiNpbmNsdWRlICJteV9hc3NldF9tYW5hZ2VyLmgiCgoKCm5hbWVzcGFjZSB7CgoKICAgIHZvaWQgU2hvd0hlbHAoKSB7CiAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpJbmZvLCAiYWRiIHNoZWxsIHNldHByb3AgZGVidWcueHIuZ3JhcGhpY3NQbHVnaW4gVnVsa2FuIik7CiAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpJbmZvLCAiYWRiIHNoZWxsIHNldHByb3AgZGVidWcueHIuZm9ybUZhY3RvciBIbWR8SGFuZGhlbGQiKTsKICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJhZGIgc2hlbGwgc2V0cHJvcCBkZWJ1Zy54ci52aWV3Q29uZmlndXJhdGlvbiBTdGVyZW98TW9ubyIpOwogICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgImFkYiBzaGVsbCBzZXRwcm9wIGRlYnVnLnhyLmJsZW5kTW9kZSBPcGFxdWV8QWRkaXRpdmV8QWxwaGFCbGVuZCIpOwogICAgfQoKICAgIGJvb2wgVXBkYXRlT3B0aW9uc0Zyb21TeXN0ZW1Qcm9wZXJ0aWVzKE9wdGlvbnMmIG9wdGlvbnMpIHsKICAgICAgICBjaGFyIHZhbHVlW1BST1BfVkFMVUVfTUFYXSA9IHt9OwogICAgICAgIGlmIChfX3N5c3RlbV9wcm9wZXJ0eV9nZXQoImRlYnVnLnhyLmdyYXBoaWNzUGx1Z2luIiwgdmFsdWUpICE9IDApIHsKICAgICAgICAgICAgb3B0aW9ucy5HcmFwaGljc1BsdWdpbiA9IHZhbHVlOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlcXVpcmVkIHBhcmFtZXRlcnMuCiAgICAgICAgaWYgKG9wdGlvbnMuR3JhcGhpY3NQbHVnaW4uZW1wdHkoKSkgewogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6Oldhcm5pbmcsICJHcmFwaGljc1BsdWdpbiBEZWZhdWx0IFZ1bGthbiIpOwogICAgICAgICAgICBvcHRpb25zLkdyYXBoaWNzUGx1Z2luID0gIlZ1bGthbiI7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCn0gIC8vIG5hbWVzcGFjZQoKCnN0cnVjdCBBbmRyb2lkQXBwU3RhdGUgewogICAgQU5hdGl2ZVdpbmRvdyogTmF0aXZlV2luZG93ID0gbnVsbHB0cjsKICAgIGJvb2wgUmVzdW1lZCA9IGZhbHNlOwp9OwoKLyoqCiAqIFByb2Nlc3MgdGhlIG5leHQgbWFpbiBjb21tYW5kLgogKi8Kc3RhdGljIHZvaWQgYXBwX2hhbmRsZV9jbWQoc3RydWN0IGFuZHJvaWRfYXBwKiBhcHAsIGludDMyX3QgY21kKSB7CiAgICBBbmRyb2lkQXBwU3RhdGUqIGFwcFN0YXRlID0gKEFuZHJvaWRBcHBTdGF0ZSopYXBwLT51c2VyRGF0YTsKCiAgICBzd2l0Y2ggKGNtZCkgewogICAgICAgIC8vIFRoZXJlIGlzIG5vIEFQUF9DTURfQ1JFQVRFLiBUaGUgQU5hdGl2ZUFjdGl2aXR5IGNyZWF0ZXMgdGhlCiAgICAgICAgLy8gYXBwbGljYXRpb24gdGhyZWFkIGZyb20gb25DcmVhdGUoKS4gVGhlIGFwcGxpY2F0aW9uIHRocmVhZAogICAgICAgIC8vIHRoZW4gY2FsbHMgYW5kcm9pZF9tYWluKCkuCiAgICAgICAgY2FzZSBBUFBfQ01EX1NUQVJUOiB7CiAgICAgICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgIiAgICBBUFBfQ01EX1NUQVJUIik7CiAgICAgICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgIm9uU3RhcnQoKSIpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY2FzZSBBUFBfQ01EX1JFU1VNRTogewogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJvblJlc3VtZSgpIik7CiAgICAgICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgIiAgICBBUFBfQ01EX1JFU1VNRSIpOwogICAgICAgICAgICBhcHBTdGF0ZS0+UmVzdW1lZCA9IHRydWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjYXNlIEFQUF9DTURfUEFVU0U6IHsKICAgICAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpJbmZvLCAib25QYXVzZSgpIik7CiAgICAgICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgIiAgICBBUFBfQ01EX1BBVVNFIik7CiAgICAgICAgICAgIGFwcFN0YXRlLT5SZXN1bWVkID0gZmFsc2U7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjYXNlIEFQUF9DTURfU1RPUDogewogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJvblN0b3AoKSIpOwogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICIgICAgQVBQX0NNRF9TVE9QIik7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjYXNlIEFQUF9DTURfREVTVFJPWTogewogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICJvbkRlc3Ryb3koKSIpOwogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICIgICAgQVBQX0NNRF9ERVNUUk9ZIik7CiAgICAgICAgICAgIGFwcFN0YXRlLT5OYXRpdmVXaW5kb3cgPSBOVUxMOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY2FzZSBBUFBfQ01EX0lOSVRfV0lORE9XOiB7CiAgICAgICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgInN1cmZhY2VDcmVhdGVkKCkiKTsKICAgICAgICAgICAgTG9nOjpXcml0ZShMb2c6OkxldmVsOjpJbmZvLCAiICAgIEFQUF9DTURfSU5JVF9XSU5ET1ciKTsKICAgICAgICAgICAgYXBwU3RhdGUtPk5hdGl2ZVdpbmRvdyA9IGFwcC0+d2luZG93OwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY2FzZSBBUFBfQ01EX1RFUk1fV0lORE9XOiB7CiAgICAgICAgICAgIExvZzo6V3JpdGUoTG9nOjpMZXZlbDo6SW5mbywgInN1cmZhY2VEZXN0cm95ZWQoKSIpOwogICAgICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkluZm8sICIgICAgQVBQX0NNRF9URVJNX1dJTkRPVyIpOwogICAgICAgICAgICBhcHBTdGF0ZS0+TmF0aXZlV2luZG93ID0gTlVMTDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfQp9CgovKioKICogVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBvZiBhIG5hdGl2ZSBhcHBsaWNhdGlvbiB0aGF0IGlzIHVzaW5nCiAqIGFuZHJvaWRfbmF0aXZlX2FwcF9nbHVlLiAgSXQgcnVucyBpbiBpdHMgb3duIHRocmVhZCwgd2l0aCBpdHMgb3duCiAqIGV2ZW50IGxvb3AgZm9yIHJlY2VpdmluZyBpbnB1dCBldmVudHMgYW5kIGRvaW5nIG90aGVyIHRoaW5ncy4KICovCnZvaWQgYW5kcm9pZF9tYWluKHN0cnVjdCBhbmRyb2lkX2FwcCogYXBwKSB7CiAgICB0cnkgewogICAgICAgIEpOSUVudiogRW52OwogICAgICAgIGFwcC0+YWN0aXZpdHktPnZtLT5BdHRhY2hDdXJyZW50VGhyZWFkKCZFbnYsIG51bGxwdHIpOwoKICAgICAgICBBbmRyb2lkQXBwU3RhdGUgYXBwU3RhdGUgPSB7fTsKCiAgICAgICAgYXBwLT51c2VyRGF0YSA9ICZhcHBTdGF0ZTsKICAgICAgICBhcHAtPm9uQXBwQ21kID0gYXBwX2hhbmRsZV9jbWQ7CgogICAgICAgIHN0ZDo6c2hhcmVkX3B0cjxPcHRpb25zPiBvcHRpb25zID0gc3RkOjptYWtlX3NoYXJlZDxPcHRpb25zPigpOwogICAgICAgIGlmICghVXBkYXRlT3B0aW9uc0Zyb21TeXN0ZW1Qcm9wZXJ0aWVzKCpvcHRpb25zKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBzdGQ6OnNoYXJlZF9wdHI8UGxhdGZvcm1EYXRhPiBkYXRhID0gc3RkOjptYWtlX3NoYXJlZDxQbGF0Zm9ybURhdGE+KCk7CiAgICAgICAgZGF0YS0+YXBwbGljYXRpb25WTSA9IGFwcC0+YWN0aXZpdHktPnZtOwogICAgICAgIGRhdGEtPmFwcGxpY2F0aW9uQWN0aXZpdHkgPSBhcHAtPmFjdGl2aXR5LT5jbGF6ejsKCiAgICAgICAgYm9vbCByZXF1ZXN0UmVzdGFydCA9IGZhbHNlOwogICAgICAgIGJvb2wgZXhpdFJlbmRlckxvb3AgPSBmYWxzZTsKCiAgICAgICAgLy9Jbml0aWFsaXplIE15QXNzZXRNYW5hZ2VyCiAgICAgICAgTXlBc3NldE1hbmFnZXI6Okluc3RhbmNlKCkuSW5pdGlhbGl6ZShhcHApOwogICAgICAgIAogICAgICAgIC8vIENyZWF0ZSBwbGF0Zm9ybS1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvbi4KICAgICAgICBzdGQ6OnNoYXJlZF9wdHI8SVBsYXRmb3JtUGx1Z2luPiBwbGF0Zm9ybVBsdWdpbiA9IENyZWF0ZVBsYXRmb3JtUGx1Z2luKG9wdGlvbnMsIGRhdGEpOwogICAgICAgIC8vIENyZWF0ZSBncmFwaGljcyBBUEkgaW1wbGVtZW50YXRpb24uCiAgICAgICAgc3RkOjpzaGFyZWRfcHRyPElHcmFwaGljc1BsdWdpbj4gZ3JhcGhpY3NQbHVnaW4gPSBDcmVhdGVHcmFwaGljc1BsdWdpbihvcHRpb25zLCBwbGF0Zm9ybVBsdWdpbik7CgogICAgICAgIC8vIEluaXRpYWxpemUgdGhlIE9wZW5YUiBwcm9ncmFtLgogICAgICAgIHN0ZDo6c2hhcmVkX3B0cjxJT3BlblhyUHJvZ3JhbT4gcHJvZ3JhbSA9IENyZWF0ZU9wZW5YclByb2dyYW0ob3B0aW9ucywgcGxhdGZvcm1QbHVnaW4sIGdyYXBoaWNzUGx1Z2luKTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbG9hZGVyIGZvciB0aGlzIHBsYXRmb3JtCiAgICAgICAgUEZOX3hySW5pdGlhbGl6ZUxvYWRlcktIUiBpbml0aWFsaXplTG9hZGVyID0gbnVsbHB0cjsKICAgICAgICBpZiAoWFJfU1VDQ0VFREVEKAogICAgICAgICAgICAgICAgeHJHZXRJbnN0YW5jZVByb2NBZGRyKFhSX05VTExfSEFORExFLCAieHJJbml0aWFsaXplTG9hZGVyS0hSIiwgKFBGTl94clZvaWRGdW5jdGlvbiopKCZpbml0aWFsaXplTG9hZGVyKSkpKSB7CiAgICAgICAgICAgIFhyTG9hZGVySW5pdEluZm9BbmRyb2lkS0hSIGxvYWRlckluaXRJbmZvQW5kcm9pZDsKICAgICAgICAgICAgbWVtc2V0KCZsb2FkZXJJbml0SW5mb0FuZHJvaWQsIDAsIHNpemVvZihsb2FkZXJJbml0SW5mb0FuZHJvaWQpKTsKICAgICAgICAgICAgbG9hZGVySW5pdEluZm9BbmRyb2lkLnR5cGUgPSBYUl9UWVBFX0xPQURFUl9JTklUX0lORk9fQU5EUk9JRF9LSFI7CiAgICAgICAgICAgIGxvYWRlckluaXRJbmZvQW5kcm9pZC5uZXh0ID0gTlVMTDsKICAgICAgICAgICAgbG9hZGVySW5pdEluZm9BbmRyb2lkLmFwcGxpY2F0aW9uVk0gPSBhcHAtPmFjdGl2aXR5LT52bTsKICAgICAgICAgICAgbG9hZGVySW5pdEluZm9BbmRyb2lkLmFwcGxpY2F0aW9uQ29udGV4dCA9IGFwcC0+YWN0aXZpdHktPmNsYXp6OwogICAgICAgICAgICBpbml0aWFsaXplTG9hZGVyKChjb25zdCBYckxvYWRlckluaXRJbmZvQmFzZUhlYWRlcktIUiopJmxvYWRlckluaXRJbmZvQW5kcm9pZCk7CiAgICAgICAgfQoKICAgICAgICBwcm9ncmFtLT5DcmVhdGVJbnN0YW5jZSgpOwogICAgICAgIHByb2dyYW0tPkluaXRpYWxpemVTeXN0ZW0oKTsKICAgICAgICBwcm9ncmFtLT5Jbml0aWFsaXplU2Vzc2lvbigpOwogICAgICAgIHByb2dyYW0tPkNyZWF0ZVN3YXBjaGFpbnMoKTsKCiAgICAgICAgd2hpbGUgKGFwcC0+ZGVzdHJveVJlcXVlc3RlZCA9PSAwKSB7CiAgICAgICAgICAgIC8vIFJlYWQgYWxsIHBlbmRpbmcgZXZlbnRzLgogICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgICBpbnQgZXZlbnRzOwogICAgICAgICAgICAgICAgc3RydWN0IGFuZHJvaWRfcG9sbF9zb3VyY2UqIHNvdXJjZTsKICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0aW1lb3V0IGlzIHplcm8sIHJldHVybnMgaW1tZWRpYXRlbHkgd2l0aG91dCBibG9ja2luZy4KICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0aW1lb3V0IGlzIG5lZ2F0aXZlLCB3YWl0cyBpbmRlZmluaXRlbHkgdW50aWwgYW4gZXZlbnQgYXBwZWFycy4KICAgICAgICAgICAgICAgIGNvbnN0IGludCB0aW1lb3V0TWlsbGlzZWNvbmRzID0KICAgICAgICAgICAgICAgICAgICAoIWFwcFN0YXRlLlJlc3VtZWQgJiYgIXByb2dyYW0tPklzU2Vzc2lvblJ1bm5pbmcoKSAmJiBhcHAtPmRlc3Ryb3lSZXF1ZXN0ZWQgPT0gMCkgPyAtMSA6IDA7CiAgICAgICAgICAgICAgICBpZiAoQUxvb3Blcl9wb2xsQWxsKHRpbWVvdXRNaWxsaXNlY29uZHMsIG51bGxwdHIsICZldmVudHMsICh2b2lkKiopJnNvdXJjZSkgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gUHJvY2VzcyB0aGlzIGV2ZW50LgogICAgICAgICAgICAgICAgaWYgKHNvdXJjZSAhPSBudWxscHRyKSB7CiAgICAgICAgICAgICAgICAgICAgc291cmNlLT5wcm9jZXNzKGFwcCwgc291cmNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHJvZ3JhbS0+UG9sbEV2ZW50cygmZXhpdFJlbmRlckxvb3AsICZyZXF1ZXN0UmVzdGFydCk7CgogICAgICAgICAgICBpZiAoZXhpdFJlbmRlckxvb3AgJiYgIXJlcXVlc3RSZXN0YXJ0KSB7CiAgICAgICAgICAgICAgICBBTmF0aXZlQWN0aXZpdHlfZmluaXNoKGFwcC0+YWN0aXZpdHkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIXByb2dyYW0tPklzU2Vzc2lvblJ1bm5pbmcoKSkgewogICAgICAgICAgICAgICAgLy8gVGhyb3R0bGUgbG9vcCBzaW5jZSB4cldhaXRGcmFtZSB3b24ndCBiZSBjYWxsZWQuCiAgICAgICAgICAgICAgICBzdGQ6OnRoaXNfdGhyZWFkOjpzbGVlcF9mb3Ioc3RkOjpjaHJvbm86Om1pbGxpc2Vjb25kcygyNTApKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwcm9ncmFtLT5Qb2xsQWN0aW9ucygpOwogICAgICAgICAgICBwcm9ncmFtLT5SZW5kZXJGcmFtZSgpOwogICAgICAgIH0KICAgICAgICBhcHAtPmFjdGl2aXR5LT52bS0+RGV0YWNoQ3VycmVudFRocmVhZCgpOwogICAgfQogICAgY2F0Y2ggKGNvbnN0IHN0ZDo6ZXhjZXB0aW9uICZleCkKICAgIHsKICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkVycm9yLCBleC53aGF0KCkpOwogICAgfQogICAgY2F0Y2ggKC4uLikKICAgIHsKICAgICAgICBMb2c6OldyaXRlKExvZzo6TGV2ZWw6OkVycm9yLCAiVW5rbm93biBFcnJvciIpOwogICAgfQp9CgAAAAAAAAAApxwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAbgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2096,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAvCAAAIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB1c2luZyBDTWFrZSB3aXRoIEFuZHJvaWQgU3R1ZGlvLCByZWFkIHRoZQojIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZC5hbmRyb2lkLmNvbS9zdHVkaW8vcHJvamVjdHMvYWRkLW5hdGl2ZS1jb2RlLmh0bWwKCiMgU2V0cyB0aGUgbWluaW11bSB2ZXJzaW9uIG9mIENNYWtlIHJlcXVpcmVkIHRvIGJ1aWxkIHRoZSBuYXRpdmUgbGlicmFyeS4KCmNtYWtlX21pbmltdW1fcmVxdWlyZWQoVkVSU0lPTiAzLjQuMSkKCiMgYnVpbGQgbmF0aXZlX2FwcF9nbHVlIGFzIGEgc3RhdGljIGxpYgpzZXQoQVBQX0dMVUVfRElSICR7QU5EUk9JRF9OREt9L3NvdXJjZXMvYW5kcm9pZC9uYXRpdmVfYXBwX2dsdWUpCmluY2x1ZGVfZGlyZWN0b3JpZXMoJHtBUFBfR0xVRV9ESVJ9KQphZGRfbGlicmFyeSggYXBwLWdsdWUgU1RBVElDICR7QVBQX0dMVUVfRElSfS9hbmRyb2lkX25hdGl2ZV9hcHBfZ2x1ZS5jKQoKCmFkZF9kZWZpbml0aW9ucygtRFhSX1VTRV9QTEFURk9STV9BTkRST0lEKQphZGRfZGVmaW5pdGlvbnMoLURYUl9VU0VfR1JBUEhJQ1NfQVBJX09QRU5HTF9FUykKYWRkX2RlZmluaXRpb25zKC1EWFJfVVNFX0dSQVBISUNTX0FQSV9WVUxLQU4pCnNldChDTUFLRV9TSEFSRURfTElOS0VSX0ZMQUdTICIke0NNQUtFX1NIQVJFRF9MSU5LRVJfRkxBR1N9IC11IEFOYXRpdmVBY3Rpdml0eV9vbkNyZWF0ZSIpCgoKZmlsZShHTE9CIExPQ0FMX0hFQURFUlMgICJwaWNvX3JlbW90aW5nX3BsYXllci8qLmgiKQpmaWxlKEdMT0IgTE9DQUxfU09VUkNFICAgInBpY29fcmVtb3RpbmdfcGxheWVyLyouY3BwIikKZmlsZShHTE9CIFZVTEtBTl9TSEFERVJTICJwaWNvX3JlbW90aW5nX3BsYXllci92dWxrYW5fc2hhZGVycy8qLmdsc2wiKQoKTElOS19ESVJFQ1RPUklFUyhvcGVueHJfbG9hZGVyLyR7QU5EUk9JRF9BQkl9KQppbmNsdWRlX2RpcmVjdG9yaWVzKG9wZW54cl9sb2FkZXIvaW5jbHVkZSkKCmFkZF9saWJyYXJ5KCAjIFNldHMgdGhlIG5hbWUgb2YgdGhlIGxpYnJhcnkuCiAgICAgICAgcGljb19yZW1vdGluZ19wbGF5ZXIKCQlTSEFSRUQKICAgICAgICAke0xPQ0FMX1NPVVJDRX0KICAgICAgICAke0xPQ0FMX0hFQURFUlN9CgkJJHtWVUxLQU5fU0hBREVSU30KICAgICAgICBvcGVueHJfbG9hZGVyL2luY2x1ZGUvY29tbW9uL2dmeHdyYXBwZXJfb3BlbmdsLmMKCQkpCgpzb3VyY2VfZ3JvdXAoIkhlYWRlcnMiIEZJTEVTICR7TE9DQUxfSEVBREVSU30pCnNvdXJjZV9ncm91cCgiU2hhZGVycyIgRklMRVMgJHtWVUxLQU5fU0hBREVSU30pCgoKaWYoVnVsa2FuSGVhZGVyc19JTkNMVURFX0RJUlMpCiAgICB0YXJnZXRfaW5jbHVkZV9kaXJlY3RvcmllcyhwaWNvX3JlbW90aW5nX3BsYXllcgogICAgICAgICAgICBQUklWQVRFCiAgICAgICAgICAgICR7VnVsa2FuSGVhZGVyc19JTkNMVURFX0RJUlN9CiAgICAgICAgICAgICkKZW5kaWYoKQoKaWYoVnVsa2FuX0xJQlJBUlkpCiAgICB0YXJnZXRfbGlua19saWJyYXJpZXMocGljb19yZW1vdGluZ19wbGF5ZXIgJHtWdWxrYW5fTElCUkFSWX0pCmVuZGlmKCkKCiMgU3BlY2lmaWVzIGxpYnJhcmllcyBDTWFrZSBzaG91bGQgbGluayB0byB5b3VyIHRhcmdldCBsaWJyYXJ5LiBZb3UKIyBjYW4gbGluayBtdWx0aXBsZSBsaWJyYXJpZXMsIHN1Y2ggYXMgbGlicmFyaWVzIHlvdSBkZWZpbmUgaW4gdGhpcwojIGJ1aWxkIHNjcmlwdCwgcHJlYnVpbHQgdGhpcmQtcGFydHkgbGlicmFyaWVzLCBvciBzeXN0ZW0gbGlicmFyaWVzLgoKdGFyZ2V0X2xpbmtfbGlicmFyaWVzKCAjIFNwZWNpZmllcyB0aGUgdGFyZ2V0IGxpYnJhcnkuCiAgICAgICAgICAgICAgICAgICAgICAgcGljb19yZW1vdGluZ19wbGF5ZXIKICAgICAgICAgICAgICAgICAgICAgICBvcGVueHJfbG9hZGVyCiAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZAogICAgICAgICAgICAgICAgICAgICAgIHZ1bGthbgogICAgICAgICAgICAgICAgICAgICAgIEVHTAogICAgICAgICAgICAgICAgICAgICAgIEdMRVN2MwogICAgICAgICAgICAgICAgICAgICAgIGFwcC1nbHVlCiAgICAgICAgICAgICAgICAgICAgICAgbG9nCiAgICAgICAgICAgICAgICAgICAgICAgKQAAAAAAAAAAMAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pico_remoting_player/graphicsplugin.h",
			"redo_stack":
			[
				[
					70,
					1,
					"paste",
					null,
					"AgAAAHkFAAAAAAAAmQUAAAAAAAAAAAAAWQUAAAAAAABZBQAAAAAAACAAAABYckNvbXBvc2l0aW9uTGF5ZXJQcm9qZWN0aW9uVmlldw",
					"AQAAAAAAAAABAAAAeQUAAAAAAAB5BQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 2172,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "pico_remoting_player/graphicsplugin_vulkan.cpp",
			"settings":
			{
				"buffer_size": 59865,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					358,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pico_remoting_player/graphicsplugin_factory.cpp",
			"settings":
			{
				"buffer_size": 1990,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ssC",
				"Set Syntax: C#"
			],
			[
				"ss cmak",
				"Set Syntax: CMake"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ss bash",
				"Set Syntax: Bash"
			],
			[
				"ss uni",
				"Set Syntax: UnityShader"
			],
			[
				"ssp",
				"Set Syntax: Python"
			],
			[
				"cuda",
				"Set Syntax: CUDA C++"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/vulkan_shaders"
	],
	"file_history":
	[
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/my_asset_manager.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/my_asset_manager.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/pch.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/common.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/openxr_loader/include/openxr/openxr.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/graphicsapi.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/platformplugin_factory.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/graphicsplugin_factory.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/platformplugin.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/platformplugin_android.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/platformdata.h",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/PicoRemotingPlayer.sublime-project",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/CMakeLists.txt",
		"/C/Users/flufy3d/AppData/Local/Temp/scp28018/home/dev/projects/RenderStreamKube/deployments/deployment.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp28299/home/dev/projects/RenderStreamKube/scripts/build_image.sh",
		"/C/Users/flufy3d/AppData/Local/Temp/scp28861/home/dev/projects/RenderStreamKube/pods/render-stream-hub-pod.yaml",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/build.gradle",
		"/D/Projects/VulkanTutorial/code/31_shader_compute.vert",
		"/D/Projects/VulkanTutorial/code/31_shader_compute.comp",
		"/D/Projects/VulkanTutorial/code/31_shader_compute.frag",
		"/D/Projects/VulkanTutorial/code/22_shader_ubo.vert",
		"/D/Projects/VulkanTutorial/code/CMakeLists.txt",
		"/D/Projects/VulkanTutorial/code/22_shader_ubo.frag",
		"/D/Projects/VulkanTutorial/code/27_shader_depth.vert",
		"/D/Projects/VulkanTutorial/code/27_shader_depth.frag",
		"/D/Projects/VulkanTutorial/code/18_shader_vertexbuffer.frag",
		"/D/Projects/VulkanTutorial/code/18_shader_vertexbuffer.vert",
		"/D/Projects/VulkanTutorial/code/09_shader_base.vert",
		"/D/Projects/VulkanTutorial/code/09_shader_base.frag",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/.gitignore",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/graphicsplugin_vulkan.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/pico_remoting_player/openxr_program.cpp",
		"/C/Users/flufy3d/Downloads/openxr_program_impl.cpp",
		"/C/Users/flufy3d/Downloads/vulkan_helpers.cpp",
		"/C/Users/flufy3d/Downloads/vulkan_plugin_impl.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/settings.gradle",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/AndroidManifest.xml",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/graphicsplugin_vulkan.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/logger.cpp",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/java/com/khronos/hello_xr/MainActivity.java",
		"/D/Projects/VulkanTutorial/code/.gitignore",
		"/C/Users/flufy3d/Downloads/modified_graphicsplugin.h",
		"/C/Users/flufy3d/Downloads/modified_graphicsplugin_vulkan.cpp",
		"/C/Users/flufy3d/Downloads/updated_graphicsplugin_vulkan.cpp",
		"/C/Users/flufy3d/AppData/Local/Temp/scp02762/home/dev/projects/RenderStreamKube/deployments/deployment.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp42274/home/dev/projects/RenderStreamKube/build/controller/api/api.go",
		"/C/Users/flufy3d/AppData/Local/Temp/scp58514/home/dev/projects/RenderStreamKube/services/service.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp42235/home/dev/projects/RenderStreamKube/build/controller/main.go",
		"/C/Users/flufy3d/AppData/Local/Temp/scp11009/home/dev/projects/RenderStreamKube/pods/render-stream-hub-pod.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp11474/home/dev/projects/RenderStreamKube/scripts/build_image.sh",
		"/C/Users/flufy3d/AppData/Local/Temp/scp59496/home/dev/projects/RenderStreamKube/scripts/setup_accounts.sh",
		"/C/Users/flufy3d/AppData/Local/Temp/scp11284/home/dev/projects/RenderStreamKube/scripts/manage_metallb.sh",
		"/C/Users/flufy3d/AppData/Local/Temp/scp39205/home/dev/projects/RenderStreamKube/scripts/create_configmap.sh",
		"/C/Users/flufy3d/AppData/Local/Temp/scp30747/home/dev/projects/RenderStreamKube/deployments/deployment-static.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp30082/home/dev/projects/RenderStreamKube/services/service-static.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp07461/home/dev/projects/RenderStreamKube/build/controller/Dockerfile",
		"/C/Users/flufy3d/AppData/Local/Temp/scp59089/home/dev/projects/RenderStreamKube/accounts/my-admin-sa",
		"/C/Users/flufy3d/AppData/Local/Temp/scp03200/home/dev/projects/RenderStreamKube/build/controller/config/config.go",
		"/C/Users/flufy3d/AppData/Local/Temp/scp42725/home/dev/projects/RenderStreamKube/configmaps/pod-definition-configmap.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp19029/home/dev/projects/RenderStreamKube/scripts/create_secret.sh",
		"/C/Users/flufy3d/AppData/Local/Temp/scp45965/home/dev/projects/RenderStreamKube/pods/render-stream-hub-pod.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp30001/home/dev/projects/RenderStreamKube/build/webserver/client/public/receiver/index.html",
		"/C/Users/flufy3d/AppData/Local/Temp/scp14196/home/dev/projects/RenderStreamKube/build/webserver/client/public/receiver/js/main.js",
		"/C/Users/flufy3d/AppData/Local/Temp/scp17274/home/dev/projects/RenderStreamKube/pods/render-stream-hub-pod.yaml",
		"/C/Users/flufy3d/AppData/Local/Temp/scp13413/home/dev/projects/RenderStreamKube/build/controller/main.go",
		"/C/Users/flufy3d/AppData/Local/Temp/scp36754/home/dev/projects/RenderStreamKube/build/controller/ws/hub.go",
		"/C/Users/flufy3d/AppData/Local/Temp/scp07202/home/dev/projects/RenderStreamKube/build/webserver/client/public/js/config.js",
		"/C/Users/flufy3d/AppData/Local/Temp/scp05274/home/dev/projects/RenderStreamKube/build/controller/api/api.go",
		"/C/Users/flufy3d/AppData/Local/Temp/scp30542/home/dev/projects/RenderStreamKube/build/webserver/client/public/receiver/css/style.css",
		"/C/Users/flufy3d/AppData/Local/Temp/scp10623/home/dev/projects/RenderStreamKube/build/webserver/client/public/index.html",
		"/C/Users/flufy3d/AppData/Local/Temp/scp03589/etc/nginx/sites-available/bitsea",
		"/C/Users/flufy3d/AppData/Local/Temp/scp21573/home/dev/projects/RenderStreamKube/build/controller/README.md",
		"/C/Users/flufy3d/AppData/Local/Programs/WinSCP/Text",
		"/C/Users/flufy3d/AppData/Local/Programs/WinSCP/Files/Sublime",
		"/C/Users/flufy3d/Downloads/components.yaml",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/vulkan_shaders/frag.spv",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/.gitattributes",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/main.cpp",
		"/C/Users/flufy3d/Desktop/run.log",
		"/C/Users/flufy3d/Documents/GitHub/TestNative/app/src/main/cpp/native-lib.cpp",
		"/C/Users/flufy3d/Documents/GitHub/TestNative/app/src/main/java/com/example/myapplication/MainActivity.kt",
		"/C/Users/flufy3d/Desktop/debug.log",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/local.properties",
		"/C/Users/flufy3d/Documents/GitHub/EndlessTunnel/gradle/wrapper/gradle-wrapper.properties",
		"/D/Projects/endless-tunnel/endless-tunnel/endless-tunnel.vcxproj",
		"/C/Users/flufy3d/Documents/GitHub/MIGPT/MIGPT.py",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/build/outputs/apk/debug/output-metadata.json",
		"/C/Users/flufy3d/Documents/GitHub/PicoRemotingPlayer/hello_xr/openxr_program.cpp",
		"/C/Users/flufy3d/Documents/GitHub/HelloXR/build.gradle",
		"/C/Users/flufy3d/Documents/GitHub/HelloXR/gradle/wrapper/gradle-wrapper.properties",
		"/D/Projects/PicoStart/Plugins/PICOLivePreview/Source/ThirdParty/Libs/Include/streamingDriverInterface/streaming_driver_interface.h",
		"/D/Projects/PicoStart/PicoStart.uproject",
		"/D/Projects/PicoStart/Plugins/PICOLivePreview/Source/ThirdParty/Libs/Include/pxr_base/stream/video_stream.h",
		"/D/Projects/PicoStart/Plugins/PICOLivePreview/Source/PICOXRDPEditor/Private/PXR_DPEditor.cpp",
		"/D/Projects/PicoStart/Plugins/PICOLivePreview/Source/PICOXRDPHMD/Private/PXR_DPManager.cpp",
		"/D/Projects/PicoStart/Intermediate/Android/arm64/gradle/gradle.properties",
		"/D/Projects/PicoStart/Intermediate/Android/arm64/gradle/gradle/wrapper/gradle-wrapper.properties",
		"/D/Projects/PicoStart/Intermediate/Android/arm64/gradle/gradlew.bat",
		"/D/Projects/PicoStart/Intermediate/Android/arm64/gradle/local.properties",
		"/C/Users/flufy3d/Documents/Unreal Projects/TestMetaHuman/TestMetaHuman.uproject",
		"/D/Projects/PicoStart 5.1 - 2/PicoStart.uproject",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/UnrealHitchParser/UnrealHitchParser.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/UnrealGameSync/PostBadgeStatus/PostBadgeStatus.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/PrereqInstaller/CustomAction/CustomAction.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/ImageValidator/ImageValidator.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/Enterprise/Datasmith/DatasmithSolidworksExporter/RegistryKeyExistsCustomAction/RegistryKeyExistsCustomAction.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/Enterprise/Datasmith/DatasmithSolidworksExporter/PreprocessWxs/PreprocessWxs.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/Enterprise/Datasmith/DatasmithSolidworksExporter/DatasmithSolidworks/DatasmithSolidworks.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/Enterprise/Datasmith/DatasmithRhinoExporter/DatasmithRhino7/DatasmithRhino7.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/Enterprise/Datasmith/DatasmithRhinoExporter/DatasmithRhino6/DatasmithRhino6.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/Enterprise/Datasmith/DatasmithRevitExporter/Resources/DatasmithRevitResources.csproj",
		"/D/Projects/UnrealEngine/Engine/Source/Programs/NetworkProfiler/NetworkProfiler/NetworkProfiler.csproj",
		"/D/Projects/UnrealEngine/Engine/Saved/CsTools/Engine/Source/Programs/NetworkProfiler/NetworkProfiler/NetworkProfiler.csproj",
		"/D/Projects/UnrealEngine/Engine/Build/InstalledEngineBuild.xml",
		"/D/Projects/UnrealEngine/Engine/Intermediate/Build/Win64/UnrealEditor/Development/WorldBrowser/UnrealEditor-WorldBrowser.lib.response",
		"/C/Users/flufy3d/.condarc",
		"/D/Projects/UnrealEngine/Engine/Source/ThirdParty/Android/package.xml",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/.gitignore",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/Engine/Programs/UnrealBuildTool/Log_GPF.txt",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/Engine/Source/Programs/UnrealBuildTool/Platform/Windows/VCToolChain.cs",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/Engine/Plugins/Runtime/Database/ADOSupport/Source/ADOSupport/Private/ADOSupport.cpp",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/Engine/Intermediate/Build/Win64/UnrealEditor/Development/VisualStudioDTE/dte80a.cpp",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/Engine/Extras/Android/SetupAndroid.bat",
		"/C/Users/flufy3d/Documents/GitHub/UnrealEngine/cpp.hint",
		"/C/Users/flufy3d/Documents/GitHub/Teapot/README.md",
		"/C/Users/flufy3d/Documents/GitHub/Hologram/.gitignore",
		"/C/Users/flufy3d/Documents/GitHub/Hologram/Assets/Hologram/HologramRenderer.shader",
		"/C/Users/flufy3d/Documents/GitHub/Hologram/Assets/Hologram/hologramRendererGL.shader"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 128.0,
		"where_history":
		[
			"",
			"C:\\Users\\flufy3d\\Documents\\GitHub\\PicoRemotingPlayer",
			"C:\\Users\\flufy3d\\Documents\\GitHub\\HelloXR",
			"",
			"D:\\Projects\\UnrealEngine\\Engine\\Source\\Programs"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"LOCAL_SOURCE",
			"my",
			"fmt",
			"resource",
			"__android_log_print",
			"CmdBuffer",
			"m_memAllocator",
			"MemoryAllocator",
			"depthBuffer",
			"DepthBuffer",
			"GetVulkanGraphicsRequirements2KHR",
			"XrFovf",
			"XrCompositionLayerProjectionView",
			"CreateGraphicsPlugin",
			"Cube",
			"IGraphicsPlugin",
			"graphicsapi.h",
			"CreateGraphicsAPI",
			"IGraphicsApi",
			"CreateGraphicsAPI",
			"IGraphicsApi",
			"IGraphicsAdapter",
			"GetSwapchainImageType",
			"debugReportThunk",
			"LIST_OBJECT_TYPES",
			"VulkanGraphicsPlugin",
			"graphicsPluginMap",
			"CreateGraphicsPlugin_OpenGLES",
			"XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR",
			"instanceCreateInfoAndroid",
			"UNUSED_PARM",
			"UpdateOptionsFromSystemProperties",
			"ShowHelp",
			"UpdateOptionsFromSystemProperties",
			"ShowHelp",
			"InputRemoting",
			"class",
			"actionEvent",
			"performed ",
			"InitializeActions",
			"System Properties: Name",
			"System Graphics Properties",
			"add_shaders_target",
			"add_chapter",
			"VK_EXT",
			"Extension name",
			"extens",
			"extension",
			"add_shaders_target",
			"CHAPTER_SHADER",
			"add_chapter",
			"CHECK_XRCMD",
			"CreateVulkanInstanceKHR",
			"CreateVulkanDeviceKHR",
			"GetVulkanGraphicsDevice2KHR",
			"GetVulkanGraphicsRequirements2KHR",
			"createvulkan",
			"m_instance",
			"m_instance =",
			"m_instance",
			"m_instance ",
			"m_instance = ",
			"m_instance =",
			"m_instance",
			"InitializeDevice",
			"CreateVulkanInstanceKHR",
			"device",
			"createin",
			"vk",
			"vkCreateInstance",
			"hello_xr",
			"com.khronos.hello_xr",
			"hello_xr",
			"EGL",
			"gle",
			"gl",
			"gles",
			"STB_INCLUDEDIR",
			"LIBS",
			"tinyobjloader",
			"STB_INCLUDEDIR",
			"include",
			"SHADER",
			"Port",
			"render-stream-hub",
			"s",
			"pod",
			"message",
			"SP",
			"SPK",
			"LOGI",
			"SPK",
			"SP",
			"SPK",
			"Current graph",
			"VULKAN_SHADERS",
			"device_id",
			"do_tts",
			"帮我",
			"get_latest_ask_from_xiaoai",
			"run_forever",
			"tts_command",
			"HARDWARE_COMMAND_DICT",
			"x08c",
			"get_latest_ask_from_xiaoai",
			"_init_first_data_and_chatbot",
			"_init_cookie",
			"check_new_query",
			"init_all_data",
			"_init_cookie",
			"login_miboy",
			"HARDWARE_COMMAND_DICT",
			"红米小爱触屏音箱Pro",
			"SOUND_TYPE",
			"compile_glsl",
			"HelloXR",
			"Hello",
			"com.android.tools.build:gradle",
			"base-extension",
			"prepareKotlinBuildScriptModel",
			"SubmitLayerImage",
			"StreamingDriverInterfacePtr =",
			"StreamingDriverInterfacePtr",
			"ConnectStreamingServer",
			"<TargetFrameworkVersion>v4",
			"v4",
			"4.5",
			".net"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"pico_remoting_player",
			"com.spk.pico_remoting_player"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pico_remoting_player/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7153,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								94
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2096,
						"regions":
						{
						},
						"selection":
						[
							[
								1072,
								1084
							]
						],
						"settings":
						{
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1053.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pico_remoting_player/graphicsplugin.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2172,
						"regions":
						{
						},
						"selection":
						[
							[
								928,
								928
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 405.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pico_remoting_player/graphicsplugin_vulkan.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 59865,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pico_remoting_player/graphicsplugin_factory.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1990,
						"regions":
						{
						},
						"selection":
						[
							[
								1410,
								1430
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 48.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "PicoRemotingPlayer.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 284.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
